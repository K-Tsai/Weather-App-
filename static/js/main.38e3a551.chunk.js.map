{"version":3,"sources":["Components/Forms/Form.js","Components/Titles/Titles.js","Components/Weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","onSubmit","this","props","loadWeather","className","type","name","value","city","country","React","Component","Titles","Weather","src","icon","temperature","humidity","description","error","Api_Key","App","getWeather","e","a","async","target","elements","preventDefault","fetch","api_call","json","result","cod","setState","sys","main","temp","weather","undefined","state","bind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38e3a551.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Form.css\"\r\n\r\nclass Form extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<form onSubmit = {this.props.loadWeather}>\r\n\t\t\t\t<fieldset className= \"d-flex flex-column\">\r\n\t\t\t\t\t<legend>Input Information</legend>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tCity:\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tname= \"city\" \r\n\t\t\t\t\t\tvalue={this.props.city}\r\n\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tCountry:\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype =\"text\" \r\n\t\t\t\t\t\tname =\"country\"  \r\n\t\t\t\t\t\tvalue={this.props.country} \r\n\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<button \r\n\t\t\t\t\ttype =\"submit\" \r\n\t\t\t\t\tclassName=\"btn btn-default btn-lg\" \r\n\t\t\t\t\tvalue=\"Submit\">Get Weather\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</fieldset>\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport \"./Titles.css\";\r\n\r\nclass Titles extends React.Component {\r\n  render () {\r\n\t\treturn (\r\n\t\t\t<div className = \"text-center\">\r\n\t\t\t\t<div className = \"titles\">\r\n\t\t\t\t\t<h1 className= \"mainTitle\"> Weather App</h1>\r\n\t\t\t\t\t<h5 className= \"subTitle\"> Helps you find weather conditions in cities</h5>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Titles;","import React from 'react';\r\nimport \"./Weather.css\";\r\nimport Img from 'react-image';\r\n\r\nclass Weather extends React.Component {\r\n  render() {\r\n    return (\r\n\t\t\t<div className= \"results\">\r\n\t\t\t\t<div className=\"frontIcon\">\r\n\t\t\t\t\t<Img src={`https://openweathermap.org/img/wn/${this.props.icon}@2x.png`}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<h1 className= \"temperature\">{this.props.temperature}</h1>\r\n      \t<p className= \"location\">{this.props.city}{this.props.country} </p>\r\n\t\t\t\t<p className= \"humidity\">{this.props.humidity}</p>\r\n\t\t\t\t<p className= \"description\">{this.props.description}</p>\r\n\t\t\t\t<p className=\"error\">{this.props.error}</p>\r\n\t\t\t</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './App.css';\r\nimport Form from './Components/Forms/Form.js';\r\nimport  Titles from'./Components/Titles/Titles.js';\r\nimport Weather from './Components/Weather/Weather.js';\r\n\r\nconst Api_Key = '39ff9f318bd59dd1bb978e51622ce4c5';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: undefined,\r\n      cod: undefined,\r\n      city: undefined,\r\n      country: undefined,\r\n      temperature: undefined,\r\n      humidity: undefined,\r\n      description: undefined,\r\n      icon: undefined,\r\n    }\r\n    this.getWeather = this.getWeather.bind(this);\r\n  }\r\n\r\n  getWeather = async (e) => {\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    e.preventDefault();\r\n    const api_call= await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${Api_Key}&units=imperial`)\r\n    const result = await api_call.json();\r\n    const cod = result.cod;\r\n    if(cod === 200 && city && country){\r\n      this.setState({\r\n        city: result.name + \", \",\r\n        country: result.sys.country,\r\n        temperature: result.main.temp + \"Â°F\" ,\r\n        humidity: result.main.humidity + \"% Humidity\",\r\n        description: result.weather[0].description,\r\n        icon: result.weather[0].icon,\r\n        error:\"\"\r\n      })\r\n    } else {\r\n      this.setState({\r\n        city: undefined,\r\n        country: undefined,\r\n        temperature: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        icon: undefined,\r\n        error: \"Please Enter Correct Values\"\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className= \"container rounded\">\r\n        <header>\r\n          <Titles/>\r\n        </header>\r\n        <main>\r\n          <div className=\"col\">\r\n            <Form \r\n            loadWeather = {this.getWeather}\r\n            />\r\n          </div>\r\n          <div className = \"col\">\r\n            <Weather \r\n            city = {this.state.city}\r\n            country = {this.state.country}\r\n            temperature = {this.state.temperature} \r\n            humidity = {this.state.humidity}\r\n            description = {this.state. description}\r\n            icon = {this.state.icon}\r\n            error= {this.state.error}\r\n            />\r\n          </div>\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}